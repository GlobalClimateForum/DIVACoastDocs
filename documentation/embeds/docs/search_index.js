var documenterSearchIndex = {"docs":
[{"location":"index.html#About","page":"About","title":"About","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"DIVACoast.jl is a julia library for coastal impact and adaptation modelling. The library provides data types and algorithms to script assessment runs for different coastal impact and adaptation research questions. DIVACoast.jl is provided by the Global Climate Forum via GitLab.","category":"page"},{"location":"index.html#Download-and-Installation","page":"About","title":"Download & Installation","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Ensure you have Julia installed on your system. You can download Julia from the official julia website. ","category":"page"},{"location":"index.html","page":"About","title":"About","text":"You can get the latest (unstable) version by cloning the library repository to your machine. Since there is not stable version at the moment you have to switch to the development branch afterwards.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"git clone https://gitlab.com/globalclimateforum/DIVACoast.jl.git\ngit checkout development","category":"page"},{"location":"index.html","page":"About","title":"About","text":"The DIVA library has several dependencies with multiple ways to install them:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Install requirements to local environment  If you want to install all required packages to your local environment, easiest is to execute the install_packages.jl script within the parent directory of the repository.\nInstantiate diva_library project  If you want to use the divalibrary project environment you can execute the DIVACoast.jl script in the './src' directory. The script will activate the project and install all (instantiate) dependencies automatically to a environment called divalibrary.\nSetting environent variables  We recommend to setup environment variables for the DIVA library directory and your data directory.  ```","category":"page"},{"location":"index.html","page":"About","title":"About","text":"You can include the diva library in your script by:","category":"page"},{"location":"index.html","page":"About","title":"About","text":"include(<path_to_diva>/diva_library/src/DIVACoast.jl); using .jdiva","category":"page"},{"location":"index.html#Data-structures","page":"About","title":"Data structures","text":"","category":"section"},{"location":"index.html#Impact-Model","page":"About","title":"Impact Model","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.ComposedImpactModel\nMain.DIVACoast.LocalCoastalImpactModel","category":"page"},{"location":"index.html#Main.DIVACoast.ComposedImpactModel","page":"About","title":"Main.DIVACoast.ComposedImpactModel","text":"ComposedImpactModel{ID_TYPE1,ID_TYPE2,DATA,CIU} <: CoastalImpactUnit where {CIU <: CoastalImpactUnit}\n\nA ComposedImpactModel combines multiple LocalCoastalImpactModels into a combined datastructure.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Main.DIVACoast.LocalCoastalImpactModel","page":"About","title":"Main.DIVACoast.LocalCoastalImpactModel","text":"LocalCoastalImpactModel{DT<:Real, IDT, DATA} <: CoastalImpactUnit\n\nA LocalCoastalImpactModel combines a surge model (distribution) and a coastal plain model (HypsometricProfile). It also holds the current protection level.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Hypsometric-Profile","page":"About","title":"Hypsometric Profile","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.HypsometricProfile\nMain.DIVACoast.load_hsps_nc\nMain.DIVACoast.to_hypsometric_profile\nBase.:+","category":"page"},{"location":"index.html#Main.DIVACoast.HypsometricProfile","page":"About","title":"Main.DIVACoast.HypsometricProfile","text":"HypsometricProfile(width::DT, width_unit::String,\nelevations::Array{DT}, elevation_unit::String, area::Array{DT}, area_unit::String,\ns_exposure::StructArray{T1}, s_exposure_units::Array{String},\nd_exposure::StructArray{T2}, d_exposure_units::Array{String}) where {DT<:Real,T1,T2}\n\nA HypsometricProfile represents the variation in elevation from the coastline to inland areas. It can be constructed manually or by using load_hsps_nc() and a NetCDF-file.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Main.DIVACoast.load_hsps_nc","page":"About","title":"Main.DIVACoast.load_hsps_nc","text":"load_hsps_nc(::Type{IT}, ::Type{DT}, filename::String)::Dict{IT,HypsometricProfile{DT}} where {IT<:Integer,DT<:Real}\n\nLoad a netcdf file into hypsometric profiles. IT is the indextype (an integer type which is used to adress a specific profile), DT is the datatype (a floating point type which is used to store the data internally). Hypsometric profiles are not compressed.\n\nExamples\n\njulia> test = load_hsps_nc(Int32, Float32, \"test.nc\")\nDict{Int32, HypsometricProfile{Float32}} with 2716 entries:\n  2108 => HypsometricProfile{Float32}(1.0, Float32[-5.0, -4.9, -4.8, -4.7, -4.6, -4.5, -4.4, -4.3, -4.2, -4.1  …  19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20.0], Float32[0.0, 0.0, 0.0, 0.0, …\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.to_hypsometric_profile","page":"About","title":"Main.DIVACoast.to_hypsometric_profile","text":"tohypsometricprofile(sga::SparseGeoArray{DT,IT}, width::DT2, minelevation::DT2, maxelevation::DT2, elevation_incr::DT2)::HypsometricProfile where {DT<:Real,IT<:Integer,DT2<:Real}\n\nA hypsometric profile is constructed from an elevation geotiff representing elevations. \n\n\n\n\n\n","category":"function"},{"location":"index.html#Base.:+","page":"About","title":"Base.:+","text":"Addtion of two Hypsometric Profiles. Adds (combines) the folling properties of the HypsometricProfiles:\n\nElevation: Combine Increments\nwidth: Adds the width of both HypsometricProfiles\ncummulativeArea: Adds the cummulative are of both HypsometricProfiles\nstatic Exposure: Adds the cummulative static exposure of both HypsometricProfiles\ndynamic Exposure: Adds the dynamic exposure of both HypsometricProfiles\n\nNOTE: Distances are not added, and need to be recalculated!\n\n\n\n\n\n","category":"function"},{"location":"index.html#Adapt","page":"About","title":"Adapt","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.add_static_exposure!\nMain.DIVACoast.add_dynamic_exposure!\nMain.DIVACoast.remove_static_exposure!\nMain.DIVACoast.remove_dynamic_exposure!\nMain.DIVACoast.sed!\nMain.DIVACoast.sed_above!\nMain.DIVACoast.sed_below!\nMain.DIVACoast.remove_below!\nMain.DIVACoast.add_above!\nMain.DIVACoast.add_between!\nMain.DIVACoast.compress!","category":"page"},{"location":"index.html#Main.DIVACoast.add_static_exposure!","page":"About","title":"Main.DIVACoast.add_static_exposure!","text":"Adds static exposure to a HypsometricProfile.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.add_dynamic_exposure!","page":"About","title":"Main.DIVACoast.add_dynamic_exposure!","text":"Adds dynamic exposure to a HypsometricProfile.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.remove_static_exposure!","page":"About","title":"Main.DIVACoast.remove_static_exposure!","text":"Removes static exposure from a HypsometricProfile\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.remove_dynamic_exposure!","page":"About","title":"Main.DIVACoast.remove_dynamic_exposure!","text":"Removes dynamic exposure from a HypsometricProfile\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.sed!","page":"About","title":"Main.DIVACoast.sed!","text":"Applies factor to exposed assets / population. (socio-economic development)\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.sed_above!","page":"About","title":"Main.DIVACoast.sed_above!","text":"Applies socio-economic development (factor) above a certain elevation.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.sed_below!","page":"About","title":"Main.DIVACoast.sed_below!","text":"Applies socio-economic development (factor) below a certain elevation.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.remove_below!","page":"About","title":"Main.DIVACoast.remove_below!","text":"Removes exposed assets / population below a certain elevation.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.add_above!","page":"About","title":"Main.DIVACoast.add_above!","text":"Adds assets / population above a certain elevation.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.add_between!","page":"About","title":"Main.DIVACoast.add_between!","text":"Adds assets / population between certain elevations.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.compress!","page":"About","title":"Main.DIVACoast.compress!","text":"compress!(hspf::HypsometricProfile)\n\nComress a hypsometric profile by removing colinear points. Calculations on compressed hypsometric profiles can be faster. Idempotent operation.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Analysis","page":"About","title":"Analysis","text":"","category":"section"},{"location":"index.html#Calculate-Damages","page":"About","title":"Calculate Damages","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.expected_damage_bathtub_standard_ddf\nMain.DIVACoast.expected_damage_bathtub","category":"page"},{"location":"index.html#Main.DIVACoast.expected_damage_bathtub_standard_ddf","page":"About","title":"Main.DIVACoast.expected_damage_bathtub_standard_ddf","text":"expecteddamagebathtubstandardddf(LocalCoastalModel::LocalCoastalModel{DT}, hddarea::DT, hddsstatic::Array{DT}, hdds_dynamic::Array{DT})\n\nThis function calculates the annual expected damage for one local coastal model (Hypsometric Profile and Extreme surge distribution) by  integrating the product of damages and the pdf (probability disctribution function) of the surge model over all possible extreme values. The output are annual expected damage for area, static and dynamic. The standard depth damage function is used to estimate flood damages.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.expected_damage_bathtub","page":"About","title":"Main.DIVACoast.expected_damage_bathtub","text":"expecteddamagebathtub(LocalCoastalModel::LocalCoastalModel{DT}, ddfarea::Function, ddfstatic::Array{Function}, ddf_dynamic::Array{Function})\n\nThis function calculates the annual expected damage for one local coastal model (Hypsometric Profile and Extreme surge distribution) by  integrating the product of damages and the pdf (probability disctribution function) of the surge model. The output are annual expected damage  for area, static and dynamic. The depth damage functions inserted as inputs are used in this functino to calculate flood damages.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Get-Exposure","page":"About","title":"Get Exposure","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.exposure_below_bathtub\nMain.DIVACoast.exposure_below_attenuated\nMain.DIVACoast.attenuate","category":"page"},{"location":"index.html#Main.DIVACoast.exposure_below_bathtub","page":"About","title":"Main.DIVACoast.exposure_below_bathtub","text":"exposure_below_bathtub(hspf::HypsometricProfile{DT}, e::Real) where {DT<:Real}\n\nCalculate the cumulative area, static exposure, and dynamic exposure below elevation (e) for a hypsometric profile. The function handles different cases based on the elevation's presence in the profile and its position.\n\nArguments\n\nhspf::HypsometricProfile{DT}: The hypsometric profile with elevation, area and exposure data. e::Real: The elevation threshold for which exposure is calculated (everything underneath this elevation).\n\nReturns\n\nExposed area, static and dynamic exposure for elevations smaller than e.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.exposure_below_attenuated","page":"About","title":"Main.DIVACoast.exposure_below_attenuated","text":"exposure_below_attenuated(hspf::HypsometricProfile{DT}, e::Real, att_rates :: Array{<:Real}) where {DT<:Real}\nexposure_below_attenuated(hspf::HypsometricProfile{DT}, e::Real, att_rate :: Real) where {DT<:Real}\n\nCalculate the cumulative area, static exposure, and dynamic exposure below elevation (e) for a hypsometric profile, taking into account attenuation.\n\nArguments\n\nhspf::HypsometricProfile{DT}: The hypsometric profile with elevation, area and exposure data. e::Real: The elevation threshold for which exposure is calculated (everything underneath this elevation). att_rates :: Array{<:Real}: an array of attenuation rates, each given in m/km. A value of 0.3 stands for an attenuation of 0.3m per km of flood extend.att_rate:: Real: an attenuation rate, given in m/km. \n\nIf attenuation rates are given as array, the array dimension has to much the array dimension of the elevation array of hspf.\n\nReturns\n\nExposed area, static and dynamic exposure for elevations smaller than e`, taking into account attenuation.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.attenuate","page":"About","title":"Main.DIVACoast.attenuate","text":"attenuate(hspf::HypsometricProfile{DT}, wl::Real, att_rates :: Array{<:Real}) where {DT<:Real}\nattenuate(hspf::HypsometricProfile{DT}, wl::Real, att_rate :: Real) where {DT<:Real}\n\nAttenuate waterlevel wl for a hypsometric profile.\n\nArguments\n\nhspf::HypsometricProfile{DT}: The hypsometric profile with elevation, area and exposure data. wl::Real: The elevation threshold for which exposure is calculated (everything underneath this elevation). att_rates :: Array{<:Real}: an array of attenuation rates, each given in m/km. A value of 0.3 stands for an attenuation of 0.3m per km of flood extend.att_rate:: Real: an attenuation rate, given in m/km. \n\nIf attenuation rates are given as array, the array dimension has to much the array dimension of the elevation array of hspf.\n\nReturns\n\nThe attenuated waterlevel.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Statistics","page":"About","title":"Statistics","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.estimate_gumbel_distribution\nMain.DIVACoast.estimate_frechet_distribution\nMain.DIVACoast.estimate_gev_distribution\nMain.DIVACoast.estimate_weibull_distribution\n\nMain.DIVACoast.estimate_gpd_negative_distribution\nMain.DIVACoast.estimate_gpd_positive_distribution\nMain.DIVACoast.estimate_gp_distribution\nMain.DIVACoast.estimate_exponential_distribution\n\nMain.DIVACoast.plot_comparison_extreme_distributions","category":"page"},{"location":"index.html#Main.DIVACoast.estimate_gumbel_distribution","page":"About","title":"Main.DIVACoast.estimate_gumbel_distribution","text":"This function tries to fit a gumbel distribution to given data.      x is the actual data (e.g. water level).     y are the empirical cdf values for the data in x (i.e. values between 0 and 1 - to be interpreted as quantiles).  The funtion returns a GeneralizedExtremeValue (GEV) with the third (shape, ξ) parameter being zero. If the cdf fit fails for any reason,  the standard gumbel distribution (μ=mean(data), σ=var(data), ξ=0.0) is returned\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.estimate_frechet_distribution","page":"About","title":"Main.DIVACoast.estimate_frechet_distribution","text":"This function fits a Frechet Distribution to the inserted data. y should be the return  period and x the corresponding water level height. The funtion returns a GeneralizedExtremeValue (GEV).\n\nThis function tries to fit a Frechet distribution to given data.      x is the actual data (e.g. water level).     y are the empirical cdf values for the data in x (i.e. values between 0 and 1 - to be interpreted as quantiles).  The funtion returns a GeneralizedExtremeValue (GEV) with the third (shape, ξ) parameter being bigger than zero. If the cdf fit fails for any reason,  a standard Frechet distribution (μ=mean(data), σ=var(data), ξ=0.5) is returned\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.estimate_gev_distribution","page":"About","title":"Main.DIVACoast.estimate_gev_distribution","text":"This function fits an extreme value distribution to the inserted data. y should be the return  period and x the corresponding water level height. The funtion returns a GeneralizedExtremeValue (GEV) and uses the best fit  out of the Gumbel, Frechet and Weibull model based on the summed squared residuals.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.estimate_weibull_distribution","page":"About","title":"Main.DIVACoast.estimate_weibull_distribution","text":"This function fits a Weibull Distribution to the inserted data. y should be the return      period and x the corresponding water level height. The funtion returns a GeneralizedExtremeValue (GEV).\n\nThis function tries to fit a Weibull distribution to given data. \n    x is the actual data (e.g. water level).\n    y are the cempirical df values for the data in x (i.e. values between 0 and 1 - to be interpreted as quantiles). \nThe funtion returns a GeneralizedExtremeValue (GEV) with the third (shape, ξ) parameter being smaller than zero. If the cdf fit fails for any reason, \na standard Weibull distribution (μ=mean(data), σ=var(data), ξ=-0.5) is returned\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.estimate_gpd_negative_distribution","page":"About","title":"Main.DIVACoast.estimate_gpd_negative_distribution","text":"This function fits a Generalized Pareto Distribution with negative shape to the inserted data. y should be the return  period and x the corresponding water level height. The funtion returns a GeneralizedPareto (GPD).\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.estimate_gpd_positive_distribution","page":"About","title":"Main.DIVACoast.estimate_gpd_positive_distribution","text":"This function fits a gpd_positive Distribution to the inserted data. y should be the return  period and x the corresponding water level height. The funtion returns a GeneralizedExtremeValue (GEV).\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.estimate_gp_distribution","page":"About","title":"Main.DIVACoast.estimate_gp_distribution","text":"This function fits an extreme value distribution to the inserted data. y should be the return  period and x the corresponding water level height. The funtion returns a GeneralizedPareto (GPD) and uses the best fit  out of the exponential, positive GPD and negative GPD model based on the summed squared residuals.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.estimate_exponential_distribution","page":"About","title":"Main.DIVACoast.estimate_exponential_distribution","text":"This function tries to fit an exponential distribution to given data.      x is the actual data (i.e. water level).     y are the cdf values for the data in x (i.e. values between 0 and 1).  The funtion returns a GeneralizedPareto (GPD) with the third shape parameter being zero. If the cdf fit fails for any reason, the standard  exponential distribution (μ=0) is returned\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.plot_comparison_extreme_distributions","page":"About","title":"Main.DIVACoast.plot_comparison_extreme_distributions","text":"plot_comparison_extreme_distributions(x_data::Array{T}, y_data::Array{T})\n\nThis function creates a plot that compares six different extreme distribution fits to underlying data. The input     is an xdata and ydata array, xdata is the absolute height of extremes and ydata is the annual probability to be below this value.     The function fits three different GEV and three different GPD functions to the data and plots all of these.          It also highlights the best fit out of these six functions and highlights this in the plot.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Data","page":"About","title":"Data","text":"","category":"section"},{"location":"index.html#Read-SLR-Data","page":"About","title":"Read SLR Data","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.SLRScenarioReader\nMain.DIVACoast.get_slr_value\nMain.DIVACoast.get_slr_value_from_cell","category":"page"},{"location":"index.html#Main.DIVACoast.SLRScenarioReader","page":"About","title":"Main.DIVACoast.SLRScenarioReader","text":"Creates a SLR-Scenario reader around a dataset (NetCDF) using dataset specific variable names for variable (e.g., \"SeaLevelRise\"), latitude, longitude, time, and quantile After the Wrapper structure was initialized dataset specific functions can be used (e.g, getslrvalue)\n\n\n\n\n\n","category":"type"},{"location":"index.html#Main.DIVACoast.get_slr_value","page":"About","title":"Main.DIVACoast.get_slr_value","text":"Gets the Sea Level Rise value at a specific location (lon, lat) in a specific quantile at a specific time.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.get_slr_value_from_cell","page":"About","title":"Main.DIVACoast.get_slr_value_from_cell","text":"Gets the Sea Level Rise value at a specific cell (indexlon, indexlat) in a specific quantile (given by index_qtl) at a specific time. Faster than the previous \n\n\n\n\n\n","category":"function"},{"location":"index.html#Read-SSP-Data","page":"About","title":"Read SSP Data","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.SSPWrapper","category":"page"},{"location":"index.html#Main.DIVACoast.SSPWrapper","page":"About","title":"Main.DIVACoast.SSPWrapper","text":"Wraps SSP Dataset (CSV file).\n\n\n\n\n\n","category":"type"},{"location":"index.html#Read-GeoTIFF","page":"About","title":"Read GeoTIFF","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.geotiff_connect","category":"page"},{"location":"index.html#Main.DIVACoast.geotiff_connect","page":"About","title":"Main.DIVACoast.geotiff_connect","text":"This function connect two geotiffs by a given operation.      infilename1::String     infilename2::String     outfilename::String     f::Function\n\n\n\n\n\n","category":"function"},{"location":"index.html#Spatial-Operations","page":"About","title":"Spatial Operations","text":"","category":"section"},{"location":"index.html#SparseGeoArray-(SGA)","page":"About","title":"SparseGeoArray (SGA)","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.SparseGeoArray\nMain.DIVACoast.getindex\nMain.DIVACoast.coords\nMain.DIVACoast.indices\nMain.DIVACoast.nh4\nMain.DIVACoast.nh8\nMain.DIVACoast.distance\nMain.DIVACoast.go_direction\nMain.DIVACoast.bounding_boxes\nMain.DIVACoast.area\nMain.DIVACoast.emptySGAfromSGA\nMain.DIVACoast.get_extent\nMain.DIVACoast.sga_union\nMain.DIVACoast.sga_intersect\nMain.DIVACoast.sga_diff\nMain.DIVACoast.sga_summarize_within\nMain.DIVACoast.minumum_mean\nMain.DIVACoast.get_closest_value\nMain.DIVACoast.get_box_around\nMain.DIVACoast.epsg2wkt\nMain.DIVACoast.proj2wkt\nMain.DIVACoast.str2wkt\nMain.DIVACoast.epsg!\nMain.DIVACoast.is_rotated\nMain.DIVACoast.bbox!","category":"page"},{"location":"index.html#Main.DIVACoast.SparseGeoArray","page":"About","title":"Main.DIVACoast.SparseGeoArray","text":"\n\n\n\n","category":"type"},{"location":"index.html#Base.getindex","page":"About","title":"Base.getindex","text":"getindex(sga::SparseGeoArray, i::AbstractRange, j::AbstractRange, k::Union{Colon,AbstractRange,Integer})\n\nIndex a SparseGeoArray with AbstractRanges to get a cropped SparseGeoArray with the correct AffineMap set.\n\nExamples\n\njulia> sga[2:3,2:3]\n2x2x1 Array{Float64, 3} with AffineMap([1.0 0.0; 0.0 1.0], [1.0, 1.0]) and undefined CRS\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.coords","page":"About","title":"Main.DIVACoast.coords","text":"coords(sga::SparseGeoArray, p::SVector{2,<:Integer}, strategy::AbstractStrategy=Center())\ncoords(sga::SparseGeoArray, p::Tuple{<:Integer,<:Integer}, strategy::AbstractStrategy=Center())\ncoords(sga::SparseGeoArray, p::CartesianIndex{2}, strategy::AbstractStrategy=Center())\n\nRetrieve coordinates of the cell index by p. See indices for the inverse function.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.indices","page":"About","title":"Main.DIVACoast.indices","text":"indices(sga::SparseGeoArray, p::SVector{2,<:Real})\n\nRetrieve logical indices of the cell represented by coordinates p. See coords for the inverse function.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.nh4","page":"About","title":"Main.DIVACoast.nh4","text":"nh4(sga :: SparseGeoArray{DT, IT}, x :: Integer, y :: Integer) :: Array{Tuple{IT,IT}}\nnh4(sga :: SparseGeoArray{DT, IT}, p :: Tuple{Integer,Integer}) :: Array{Tuple{IT,IT}}\n\nCompute the 4-Neighbourhood of the grid cell x,y in the SparseGeoArray sga and return as Array of pairs. Takes into account the boundaries of the SparseGeoArray.\n\nExamples\n\njulia> nh4(sga, 1, 1)\n2-element Vector{Tuple{Int32, Int32}}:\n (2, 1)\n (1, 2)\n\njulia> nh4(sga, 2, 4)\n4-element Vector{Tuple{Int32, Int32}}:\n (1, 4)\n (3, 4)\n (2, 3)\n (2, 5)\n\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.nh8","page":"About","title":"Main.DIVACoast.nh8","text":"same as nh4 but accounting for al 8 neighbours of a pixel with index (x,y)\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.distance","page":"About","title":"Main.DIVACoast.distance","text":"distance(lon1 :: R, lat1 :: R, lon2 :: R, lat2 :: R) :: R where {R <: Real}\ndistance(p1 :: SVector{2,R}, p2 :: SVector{2,R}) :: R where {R <: Real}\ndistance(p1 :: AbstractVector{R}, p2 :: AbstractVector{R}) :: R where {R <: Real} \ndistance(p1 :: Tuple{R,R}, p2 :: Tuple{R,R}) where {R <: Real} :: R where {R <: Real}\n\nCompute the distance (in km) between two points given by lon1,lat1 and lon2,lat2 resp. p1 and p2. Uses the Haversine formula.\n\nExamples\n\njulia> ...\n\n\n\n\n\n\ndistance(hspf::HypsometricProfile, e::Real)\n\nCompute the distance of elevation e (given in m) from the coastline in hspf. disatnce is returned in km.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.go_direction","page":"About","title":"Main.DIVACoast.go_direction","text":"go_direction(lon :: R, lat :: R, distance :: Real, direction :: AbstractDirection) :: Tuple{R,R} where {R <: Real}\n\nCompute the geographical coordinates of the point reached if we go distance km from (lon,lat) in direction. Takes into account circularity, but does not cross poles. direction can be East(), North(), West(), South()\n\nExamples\n\njulia> go_direction(13.2240, 52.3057, 10, East())\n(13.370916039175427, 52.3057)\njulia> go_direction(13.2240, 52.3057, 10000, North())\n(13.224, 90.0)\njulia> go_direction(19.0045,0.0,40075,West())\n(19.004500000000007, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.bounding_boxes","page":"About","title":"Main.DIVACoast.bounding_boxes","text":"bounding_boxes(sga :: SparseGeoArray{DT, IT}, lon_east :: Real, lon_west :: Real, lat_south :: Real, lat_north :: Real) where {DT <: Real, IT <: Integer}\n\nCompute the bounding box(es) for the sparse geoarray sga and an area from loneast to lonwest and latsouth and latnorth.\n\nExamples\n\njulia> ...\n\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.area","page":"About","title":"Main.DIVACoast.area","text":"\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.emptySGAfromSGA","page":"About","title":"Main.DIVACoast.emptySGAfromSGA","text":"emptySGAfromSGA(orgSGA::SparseGeoArray{DT,IT}, extentNew)\n\nCreates an empty SparseGeoArray from an existing SGA (orgSGA) with same projection / specifications.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.get_extent","page":"About","title":"Main.DIVACoast.get_extent","text":"Get the extent of an SparseGeoArray.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.sga_union","page":"About","title":"Main.DIVACoast.sga_union","text":"sga_union(sgaArray::Array{SparseGeoArray{DT,IT}}) Get the union of multiple SparseGeoArrays.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.sga_intersect","page":"About","title":"Main.DIVACoast.sga_intersect","text":"Get the intersetct of multiple SparseGeoArrays.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.sga_diff","page":"About","title":"Main.DIVACoast.sga_diff","text":"Get the difference of multiple SparseGeoArrays.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.sga_summarize_within","page":"About","title":"Main.DIVACoast.sga_summarize_within","text":"Summarize data within a certain radius around a point p using a summarize function.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.minumum_mean","page":"About","title":"Main.DIVACoast.minumum_mean","text":"Function to get the mean of all minimum values according to sortlist in valuelist\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.get_closest_value","page":"About","title":"Main.DIVACoast.get_closest_value","text":"Get the closest value to a point p. Should be used for small datasets only\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.get_box_around","page":"About","title":"Main.DIVACoast.get_box_around","text":"Crop a SGA to an extent defined by a radius around a point p.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.epsg2wkt","page":"About","title":"Main.DIVACoast.epsg2wkt","text":"Get the WKT of an Integer EPSG code\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.proj2wkt","page":"About","title":"Main.DIVACoast.proj2wkt","text":"Get the WKT (WellKnownText) of an Proj string\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.str2wkt","page":"About","title":"Main.DIVACoast.str2wkt","text":"Parse CRS string into WKT.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.epsg!","page":"About","title":"Main.DIVACoast.epsg!","text":"Set CRS on SparseGeoArray by epsgcode\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.is_rotated","page":"About","title":"Main.DIVACoast.is_rotated","text":"Check wether the AffineMap of a GeoArray contains rotations.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.bbox!","page":"About","title":"Main.DIVACoast.bbox!","text":"Set geotransform of SparseGeoArray by specifying a bounding box. Note that this only can result in a non-rotated or skewed GeoArray.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Spatial-Relationship","page":"About","title":"Spatial-Relationship","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"Main.DIVACoast.Neighbour\nMain.DIVACoast.nearest\nMain.DIVACoast.nearest_coord\nMain.DIVACoast.coords_to_wide","category":"page"},{"location":"index.html#Main.DIVACoast.Neighbour","page":"About","title":"Main.DIVACoast.Neighbour","text":"The Neighbours structure holds and BallTree Object and the created Matrix.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Main.DIVACoast.nearest","page":"About","title":"Main.DIVACoast.nearest","text":"The nearest function returns the index of nearest neighbour of an Neighbours Object to an coordinate.\n\nParameter\n\nn: The Neighbours Object to search trough.\ncoordinate: A coordinate the nearest neighbour relates to.\n\n\n\n\n\nThe nearest function returns the nearest neighbour of an Neighbours Object to multiple coordinates. Coordinates can be passed to the fucntion as a DataFrame. \n\nParameter\n\nn: The Neighbours Object to search trough.\ndf: DataFrame holding the coordinates, the nearest neighbour should relate to.\ndtype: DataType the coordinates will be parsed in.\nlonlatCols: Columns names (string / symbol) of the columns in the input \n\ndataframe holding the coordinates. \n\ndropna: Whether na's should be kept or not.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.nearest_coord","page":"About","title":"Main.DIVACoast.nearest_coord","text":"Does same as nearest() but returns Coordinate of nearest neighbour.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Main.DIVACoast.coords_to_wide","page":"About","title":"Main.DIVACoast.coords_to_wide","text":"This funciton transforms the longitude and latitude columns of an DataFrame to a Matrix in wide-format required for Nearest Neighbour matching. \n\nParameter\n\ndf: The input DataFrame containing the longitude and latitude column.\ndtype: The datatype the coordinates should be parsed in.\nlonlatCols: The longitude and latitude columns (default = (:lon, :lat))\n\nReturn\n\nreturns created matrix and DataFrame the matrix is based on (omitted NA values).\n\n\n\n\n\n","category":"function"}]
}
